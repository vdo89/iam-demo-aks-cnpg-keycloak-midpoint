apiVersion: batch/v1
kind: Job
metadata:
  name: midpoint-db-bootstrap
  namespace: {{NAMESPACE}}
  labels:
    app.kubernetes.io/name: midpoint-db-bootstrap
    app.kubernetes.io/component: database-bootstrap
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: midpoint-db-bootstrap
        app.kubernetes.io/component: database-bootstrap
    spec:
      restartPolicy: Never
      containers:
        - name: psql
          image: ghcr.io/cloudnative-pg/postgresql:16.4
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: cnpg-superuser
                  key: password
            - name: MIDPOINT_DB_USER
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: username
            - name: MIDPOINT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: password
            - name: DB_HOST
              value: iam-db-rw.{{NAMESPACE}}.svc.cluster.local
          command:
            - bash
            - -lc
            - |
              set -euo pipefail

              mp_user_sql=${MIDPOINT_DB_USER//\'/\'\'}
              mp_password_sql=${MIDPOINT_DB_PASSWORD//\'/\'\'}

              psql -h "${DB_HOST}" -U postgres -v ON_ERROR_STOP=1 <<SQL
              DO \$\$
              DECLARE
                role_name text := '${mp_user_sql}';
                role_password text := '${mp_password_sql}';
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = role_name) THEN
                  EXECUTE format('CREATE ROLE %I LOGIN PASSWORD %L', role_name, role_password);
                ELSE
                  EXECUTE format('ALTER ROLE %I PASSWORD %L', role_name, role_password);
                  EXECUTE format('ALTER ROLE %I LOGIN', role_name);
                END IF;
              END
              \$\$;

              DO \$\$
              DECLARE
                role_name text := '${mp_user_sql}';
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'midpoint') THEN
                  EXECUTE format('CREATE DATABASE %I OWNER %I', 'midpoint', role_name);
                ELSE
                  EXECUTE format('ALTER DATABASE %I OWNER TO %I', 'midpoint', role_name);
                END IF;
              END
              \$\$;
              SQL

              echo "Ensuring required extensions exist in database 'midpoint'"
              psql -h "${DB_HOST}" -U postgres -d midpoint -v ON_ERROR_STOP=1 <<'SQL'
              CREATE EXTENSION IF NOT EXISTS pgcrypto;
              CREATE EXTENSION IF NOT EXISTS pg_trgm;
              SQL
