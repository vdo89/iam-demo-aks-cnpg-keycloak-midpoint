apiVersion: batch/v1
kind: Job
metadata:
  name: iam-db-bootstrap
  namespace: iam
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app.kubernetes.io/name: iam-db-bootstrap
    spec:
      restartPolicy: OnFailure
      containers:
        - name: configure-databases
          image: ghcr.io/cloudnative-pg/postgresql:16.4
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              PGHOST="${PGHOST:-iam-db-rw.iam.svc.cluster.local}"
              PGPORT="${PGPORT:-5432}"

              superuser_username="$(< /var/run/secrets/cnpg-superuser/username)"
              superuser_password="$(< /var/run/secrets/cnpg-superuser/password)"

              keycloak_username="$(< /var/run/secrets/keycloak-db-app/username)"
              keycloak_password="$(< /var/run/secrets/keycloak-db-app/password)"

              midpoint_username="$(< /var/run/secrets/midpoint-db-app/username)"
              midpoint_password="$(< /var/run/secrets/midpoint-db-app/password)"

              export PGPASSWORD="${superuser_password}"

              attempts=0
              until pg_isready --host="${PGHOST}" --port="${PGPORT}" --dbname=postgres --username="${superuser_username}"; do
                attempts=$((attempts + 1))
                if [ "${attempts}" -ge 60 ]; then
                  echo "PostgreSQL is still unavailable after ${attempts} attempts" >&2
                  exit 1
                fi
                echo "Waiting for PostgreSQL to accept connections (${attempts}/60)"
                sleep 5
              done

              psql_common=(
                psql
                --host="${PGHOST}"
                --port="${PGPORT}"
                --username="${superuser_username}"
                --set=ON_ERROR_STOP=on
              )

              "${psql_common[@]}" \
                --dbname=postgres \
                --set=KEYCLOAK_USER="${keycloak_username}" \
                --set=KEYCLOAK_PASSWORD="${keycloak_password}" \
                --set=KEYCLOAK_DB='keycloak' \
                --set=MIDPOINT_USER="${midpoint_username}" \
                --set=MIDPOINT_PASSWORD="${midpoint_password}" \
                --set=MIDPOINT_DB='midpoint' <<'SQL'
DO $do$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = :'KEYCLOAK_USER') THEN
    EXECUTE format('CREATE ROLE %I LOGIN', :'KEYCLOAK_USER');
  END IF;
  EXECUTE format('ALTER ROLE %I WITH LOGIN PASSWORD %L', :'KEYCLOAK_USER', :'KEYCLOAK_PASSWORD');
END
$do$;

DO $do$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = :'KEYCLOAK_DB') THEN
    EXECUTE format('CREATE DATABASE %I OWNER %I', :'KEYCLOAK_DB', :'KEYCLOAK_USER');
  ELSE
    EXECUTE format('ALTER DATABASE %I OWNER TO %I', :'KEYCLOAK_DB', :'KEYCLOAK_USER');
  END IF;
END
$do$;

DO $do$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = :'MIDPOINT_USER') THEN
    EXECUTE format('CREATE ROLE %I LOGIN', :'MIDPOINT_USER');
  END IF;
  EXECUTE format('ALTER ROLE %I WITH LOGIN PASSWORD %L', :'MIDPOINT_USER', :'MIDPOINT_PASSWORD');
END
$do$;

DO $do$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = :'MIDPOINT_DB') THEN
    EXECUTE format('CREATE DATABASE %I OWNER %I', :'MIDPOINT_DB', :'MIDPOINT_USER');
  ELSE
    EXECUTE format('ALTER DATABASE %I OWNER TO %I', :'MIDPOINT_DB', :'MIDPOINT_USER');
  END IF;
END
$do$;
SQL

              "${psql_common[@]}" \
                --dbname=midpoint \
                --set=MIDPOINT_USER="${midpoint_username}" <<'SQL'
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS pg_trgm;
DO $do$
BEGIN
  EXECUTE format('GRANT ALL PRIVILEGES ON SCHEMA public TO %I', :'MIDPOINT_USER');
END
$do$;
SQL
          volumeMounts:
            - name: superuser-secret
              mountPath: /var/run/secrets/cnpg-superuser
              readOnly: true
            - name: keycloak-db-app
              mountPath: /var/run/secrets/keycloak-db-app
              readOnly: true
            - name: midpoint-db-app
              mountPath: /var/run/secrets/midpoint-db-app
              readOnly: true
      volumes:
        - name: superuser-secret
          secret:
            secretName: cnpg-superuser
        - name: keycloak-db-app
          secret:
            secretName: keycloak-db-app
        - name: midpoint-db-app
          secret:
            secretName: midpoint-db-app
