apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  name: rws-keycloak
  namespace: iam
spec:
  image: quay.io/keycloak/keycloak:26.0.8
  instances: 1
  startOptimized: false
  additionalOptions:
    # Inject the full JDBC string so the runtime always connects with the
    # explicit `sslmode=disable` flag even if the operator rewrites the
    # database section later.
    - name: db-url
      value: jdbc:postgresql://iam-db-rw.iam.svc.cluster.local:5432/keycloak?sslmode=disable
    - name: health-enabled
      value: "true"
    # Restore the legacy /auth base path so clients that still expect it (for
    # example midPoint's built-in Keycloak integration) resolve the realm
    # endpoints without returning a 404 from Keycloak 26.
    - name: http-relative-path
      value: /auth
    # Allow the demo ingress to terminate HTTP without Keycloak rejecting the
    # host/scheme. The nip.io address changes every time the AKS load balancer
    # IP changes, so keep hostname checks disabled explicitly at runtime.
    - name: hostname-strict
      value: "false"
    - name: hostname-strict-https
      value: "false"
    # Pin a safe default features list so the operator stops appending the
    # removed "health" toggle. The 26.x operator still injects its defaults
    # whenever the enabled list is empty, which makes the pod exit with
    # "health is an unrecognized feature".
    - name: features
      value: token-exchange
  # Pin the operator's feature list to a known good entry so it does not inject
  # the legacy "health" feature into KC_FEATURES. Keycloak 26 removed that flag
  # and will crash if we request it, so we enable the health endpoints via
  # KC_HEALTH_ENABLED instead. The operator still adds "health" when the
  # enabled list is empty, so explicitly enable a harmless feature to keep
  # KC_FEATURES stable.
  features:
    enabled:
      - token-exchange
  db:
    vendor: postgres
    url: jdbc:postgresql://iam-db-rw.iam.svc.cluster.local:5432/keycloak?sslmode=disable
    usernameSecret:
      name: keycloak-db-app
      key: username
    passwordSecret:
      name: keycloak-db-app
      key: password
  http:
    httpEnabled: true
  hostname:
    strict: false
  ingress:
    enabled: true
    className: nginx
  resources:
    requests:
      cpu: "250m"
      memory: "1.5Gi"
    limits:
      cpu: "1"
      memory: "2Gi"
---
apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: rws-realm-import
  namespace: iam
  annotations:
    iam.demo/realm-config-version: "1"
spec:
  keycloakCRName: rws-keycloak
  realm:
    id: rws
    realm: rws
    displayName: RWS Demo
    enabled: true
    registrationAllowed: false
    loginWithEmailAllowed: true
    resetPasswordAllowed: true
    sslRequired: none
    webAuthnPolicyRpEntityName: "RWS Demo"
    webAuthnPolicyUserVerificationRequirement: "required"
    webAuthnPolicyCreateTimeout: 120000
    webAuthnPolicyAvoidSameAuthenticatorRegister: true
    clients:
      - clientId: rws-midpoint
        name: rws-midpoint
        protocol: openid-connect
        publicClient: true
        directAccessGrantsEnabled: true
        standardFlowEnabled: true
        redirectUris:
          - "http://*/midpoint/*"
        webOrigins:
          - "*"

