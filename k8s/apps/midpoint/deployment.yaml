apiVersion: apps/v1
kind: Deployment
metadata:
  name: midpoint
  namespace: iam
spec:
  replicas: 1
  selector:
    matchLabels: { app: midpoint }
  template:
    metadata:
      labels: { app: midpoint }
    spec:
      initContainers:
        - name: midpoint-home-init
          image: evolveum/midpoint:4.9
          command:
            - /bin/sh
            - -c
            - |
              set -eu
              dest="/midpoint-home"
              if [ ! -d "${dest}" ]; then
                echo "Creating midPoint home directory at ${dest}"
                mkdir -p "${dest}"
              fi

              if [ -z "$(ls -A "${dest}")" ]; then
                echo "Populating midPoint home directory with default contents"
                cp -a /opt/midpoint/var/. "${dest}/"
              else
                echo "midPoint home directory already populated; skipping default copy"
              fi
          volumeMounts:
            - name: midpoint-home
              mountPath: /midpoint-home
        - name: midpoint-db-wait
          image: ghcr.io/cloudnative-pg/postgresql:16.4
          command:
            - /bin/bash
            - -ec
            - |
              set -euo pipefail

              parse_positive_int() {
                local value="$1"
                local fallback="$2"

                if [[ "${value}" =~ ^[0-9]+$ ]] && [ "${value}" -ge 1 ]; then
                  printf '%s' "${value}"
                else
                  printf '%s' "${fallback}"
                fi
              }

              host="${MIDPOINT_DB_HOST:-iam-db-rw.iam.svc.cluster.local}"
              port="${MIDPOINT_DB_PORT:-5432}"
              database="${MIDPOINT_DB_NAME:-midpoint}"
              username_file="${MIDPOINT_DB_USERNAME_FILE:-/var/run/secrets/midpoint-db-app/username}"
              password_file="${MIDPOINT_DB_PASSWORD_FILE:-/var/run/secrets/midpoint-db-app/password}"

              max_attempts="$(parse_positive_int "${MIDPOINT_DB_WAIT_MAX_ATTEMPTS:-60}" 60)"
              sleep_seconds="$(parse_positive_int "${MIDPOINT_DB_WAIT_SLEEP_SECONDS:-5}" 5)"

              if [ ! -r "${username_file}" ]; then
                echo "ERROR: repository username file ${username_file} is not readable" >&2
                exit 1
              fi

              if [ ! -r "${password_file}" ]; then
                echo "ERROR: repository password file ${password_file} is not readable" >&2
                exit 1
              fi

              username="$(tr -d '\r\n' <"${username_file}")"
              password="$(tr -d '\r\n' <"${password_file}")"

              if [ -z "${username}" ]; then
                echo "ERROR: repository username from ${username_file} is empty" >&2
                exit 1
              fi

              if [ -z "${password}" ]; then
                echo "ERROR: repository password from ${password_file} is empty" >&2
                exit 1
              fi

              attempt=1
              last_status=1
              last_output=""

              while [ "${attempt}" -le "${max_attempts}" ]; do
                if output="$(PGPASSWORD="${password}" pg_isready -h "${host}" -p "${port}" -d "${database}" -U "${username}" 2>&1)"; then
                  echo "PostgreSQL ${host}:${port}/${database} is ready (attempt ${attempt}/${max_attempts})"
                  exit 0
                fi

                last_status=$?
                last_output="${output}"

                if [ "${attempt}" -lt "${max_attempts}" ]; then
                  echo "PostgreSQL not ready (attempt ${attempt}/${max_attempts}); sleeping ${sleep_seconds}s"
                  sleep "${sleep_seconds}"
                fi

                attempt=$((attempt + 1))
              done

              echo "ERROR: timed out waiting for PostgreSQL at ${host}:${port}/${database} (last exit ${last_status})" >&2
              if [ -n "${last_output}" ]; then
                echo "Last pg_isready output:" >&2
                printf '%s\n' "${last_output}" >&2
              fi
              exit "${last_status}"
          envFrom:
            - configMapRef:
                name: midpoint-env
          env:
            - name: MIDPOINT_DB_USERNAME_FILE
              value: /var/run/secrets/midpoint-db-app/username
            - name: MIDPOINT_DB_PASSWORD_FILE
              value: /var/run/secrets/midpoint-db-app/password
          volumeMounts:
            - name: midpoint-db-credentials
              mountPath: /var/run/secrets/midpoint-db-app
              readOnly: true
        - name: midpoint-db-init
          image: evolveum/midpoint:4.9
          workingDir: /opt/midpoint
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              cd /opt/midpoint

              ninja_cmd_base=(/opt/midpoint/bin/ninja.sh)

              escape_sed() {
                printf '%s' "$1" | sed -e 's/[\\/&|]/\\&/g'
              }

              escape_xml() {
                local str="$1"

                str="${str//&/&amp;}"
                str="${str//</&lt;}"
                str="${str//>/&gt;}"
                str="${str//\'/&apos;}"
                str="${str//\"/&quot;}"

                printf '%s' "${str}"
              }

              mask_file_output() {
                local file_path="$1"

                if [ ! -f "${file_path}" ]; then
                  return 1
                fi

                if [ -n "${db_password:-}" ]; then
                  local escaped_password
                  escaped_password="$(escape_sed "${db_password}")"
                  sed "s/${escaped_password}/********/g" "${file_path}"
                else
                  cat "${file_path}"
                fi
              }

              print_masked_log() {
                local file_path="$1"
                mask_file_output "${file_path}" || cat "${file_path}"
              }

              read_secret_file() {
                local file_path="$1"
                local description="$2"

                if [ -z "${file_path}" ]; then
                  echo "ERROR: ${description} file path is empty" >&2
                  return 1
                fi

                if [ ! -r "${file_path}" ]; then
                  echo "ERROR: ${description} file ${file_path} is not readable" >&2
                  return 1
                fi

                cat "${file_path}"
              }

              parse_positive_int() {
                local value="$1"
                local fallback="$2"

                if [[ "${value}" =~ ^[0-9]+$ ]] && [ "${value}" -ge 1 ]; then
                  printf '%s' "${value}"
                else
                  printf '%s' "${fallback}"
                fi
              }

              jdbc_url="${MIDPOINT_JDBC_URL:-}"
              if [ -z "${jdbc_url}" ]; then
                echo "ERROR: Repository JDBC URL is empty" >&2
                exit 1
              fi

              db_username_file="${MIDPOINT_DB_USERNAME_FILE:-/var/run/secrets/midpoint-db-app/username}"
              db_password_file="${MIDPOINT_DB_PASSWORD_FILE:-/var/run/secrets/midpoint-db-app/password}"

              db_username="$(read_secret_file "${db_username_file}" 'repository username')"
              db_password="$(read_secret_file "${db_password_file}" 'repository password')"

              ninja_max_attempts="$(parse_positive_int "${MP_NINJA_MAX_ATTEMPTS:-30}" 30)"
              ninja_retry_delay_seconds="$(parse_positive_int "${MP_NINJA_RETRY_DELAY_SECONDS:-10}" 10)"

              run_ninja_command() {
                local log_file="$1"
                local label="$2"
                shift 2

                local attempt=1
                local status=0

                while [ "${attempt}" -le "${ninja_max_attempts}" ]; do
                  if "${ninja_cmd_base[@]}" "$@" >"${log_file}" 2>&1; then
                    echo "ninja ${label} completed successfully (attempt ${attempt}/${ninja_max_attempts})"
                    return 0
                  fi

                  status=$?
                  echo "ERROR: ninja ${label} failed with exit code ${status} (attempt ${attempt}/${ninja_max_attempts})" >&2
                  mask_file_output "${log_file}" >&2 || cat "${log_file}" >&2

                  if [ "${attempt}" -lt "${ninja_max_attempts}" ]; then
                    echo "Retrying ninja ${label} in ${ninja_retry_delay_seconds}s" >&2
                    sleep "${ninja_retry_delay_seconds}"
                  fi

                  attempt=$((attempt + 1))
                done

                return "${status}"
              }

              run_ninja_sql() {
                local label="$1"
                shift

                local log_file
                log_file="$(mktemp)"

                if run_ninja_command "${log_file}" "${label}" run-sql "$@"; then
                  rm -f "${log_file}"
                  return 0
                fi

                local status=$?
                rm -f "${log_file}"
                return "${status}"
              }

              run_midpoint_init() {
                local max_attempts
                local retry_delay

                max_attempts="$(parse_positive_int "${MIDPOINT_INIT_MAX_ATTEMPTS:-12}" 12)"
                retry_delay="$(parse_positive_int "${MIDPOINT_INIT_RETRY_DELAY_SECONDS:-10}" 10)"

                local attempt=1
                local status=0

                while [ "${attempt}" -le "${max_attempts}" ]; do
                  local log_file
                  log_file="$(mktemp)"

                  if /opt/midpoint/bin/midpoint.sh init-native >"${log_file}" 2>&1; then
                    echo "midpoint.sh init-native completed successfully (attempt ${attempt}/${max_attempts})"
                    rm -f "${log_file}"
                    return 0
                  fi

                  status=$?
                  echo "WARNING: midpoint.sh init-native failed with exit code ${status} (attempt ${attempt}/${max_attempts})" >&2
                  mask_file_output "${log_file}" >&2 || cat "${log_file}" >&2
                  rm -f "${log_file}"

                  if [ "${attempt}" -lt "${max_attempts}" ]; then
                    echo "Retrying midpoint.sh init-native in ${retry_delay}s" >&2
                    sleep "${retry_delay}"
                  fi

                  attempt=$((attempt + 1))
                done

                return "${status}"
              }

              config_template="/config-template/config.xml"
              config_target="/opt/midpoint/var/config.xml"

              echo "Rendering midPoint configuration with repository connection settings"
              if [ ! -f "${config_template}" ]; then
                echo "ERROR: Config template ${config_template} not found" >&2
                exit 1
              fi

              tmp_config="$(mktemp)"
              cp "${config_template}" "${tmp_config}"

              jdbc_url_xml="$(escape_xml "${jdbc_url}")"
              db_username_xml="$(escape_xml "${db_username}")"
              db_password_xml="$(escape_xml "${db_password}")"

              sed -i \
                -e "s|__JDBC_URL__|$(escape_sed "${jdbc_url_xml}")|g" \
                -e "s|__JDBC_USERNAME__|$(escape_sed "${db_username_xml}")|g" \
                -e "s|__JDBC_PASSWORD__|$(escape_sed "${db_password_xml}")|g" \
                "${tmp_config}"

              if grep -q '__JDBC_' "${tmp_config}"; then
                echo "ERROR: Failed to substitute repository placeholders in config.xml" >&2
                rm -f "${tmp_config}"
                exit 1
              fi

              midpoint_home="/opt/midpoint/var"

              resolve_midpoint_owner() {
                local candidate_uid
                local candidate_gid
                local sample_path

                if [ -f "${config_target}" ]; then
                  if candidate_uid="$(stat -c '%u' "${config_target}" 2>/dev/null)" && \
                     candidate_gid="$(stat -c '%g' "${config_target}" 2>/dev/null)"; then
                    if [ "${candidate_uid}" -ne 0 ] || [ "${candidate_gid}" -ne 0 ]; then
                      midpoint_uid="${candidate_uid}"
                      midpoint_gid="${candidate_gid}"
                      echo "Reusing ownership ${midpoint_uid}:${midpoint_gid} from existing config.xml"
                      return 0
                    fi
                  fi
                fi

                if candidate_uid="$(id -u midpoint 2>/dev/null)" && \
                   candidate_gid="$(id -g midpoint 2>/dev/null)"; then
                  midpoint_uid="${candidate_uid}"
                  midpoint_gid="${candidate_gid}"
                  echo "Resolved midpoint user via passwd entry: ${midpoint_uid}:${midpoint_gid}"
                  return 0
                fi

                while IFS= read -r sample_path; do
                  if [ -z "${sample_path}" ]; then
                    continue
                  fi

                  if candidate_uid="$(stat -c '%u' "${sample_path}" 2>/dev/null)" && \
                     candidate_gid="$(stat -c '%g' "${sample_path}" 2>/dev/null)"; then
                    if [ "${candidate_uid}" -ne 0 ] || [ "${candidate_gid}" -ne 0 ]; then
                      midpoint_uid="${candidate_uid}"
                      midpoint_gid="${candidate_gid}"
                      printf 'Derived midpoint owner %s:%s from %s\n' "${midpoint_uid}" "${midpoint_gid}" "${sample_path}"
                      return 0
                    fi
                  fi
                done < <(find "${midpoint_home}" -mindepth 1 -maxdepth 3 -print 2>/dev/null || true)

                if candidate_uid="$(stat -c '%u' "${midpoint_home}" 2>/dev/null)" && \
                   candidate_gid="$(stat -c '%g' "${midpoint_home}" 2>/dev/null)"; then
                  midpoint_uid="${candidate_uid}"
                  midpoint_gid="${candidate_gid}"
                  echo "Falling back to midpoint home ownership ${midpoint_uid}:${midpoint_gid}"
                  return 0
                fi

                midpoint_uid=0
                midpoint_gid=0
                echo "Falling back to root ownership for config.xml"
              }

              resolve_midpoint_owner

              echo "Setting ownership of config.xml to ${midpoint_uid}:${midpoint_gid}"

              chmod 600 "${tmp_config}"
              chown "${midpoint_uid}:${midpoint_gid}" "${tmp_config}"

              if ! mv "${tmp_config}" "${config_target}"; then
                status=$?
                echo "ERROR: Failed to install rendered config.xml (mv exited with ${status})" >&2
                rm -f "${tmp_config}" || true
                exit "${status}"
              fi

              chmod 600 "${config_target}"
              chown "${midpoint_uid}:${midpoint_gid}" "${config_target}"

              echo "Rendered config.xml with repository credentials"

              echo "Locating PostgreSQL JDBC driver"
              postgres_driver="$(find /opt/midpoint/lib -type f -name 'postgresql-*.jar' | sort | tail -n 1)"

              if [ -n "${postgres_driver}" ]; then
                echo "Using JDBC driver: ${postgres_driver}"
                ninja_cmd_base+=(-j "${postgres_driver}")
              else
                echo "WARNING: Could not find a PostgreSQL JDBC driver under /opt/midpoint/lib; relying on default classpath" >&2
              fi

              if ! run_midpoint_init; then
                echo "Continuing with manual schema bootstrap despite midpoint.sh init-native failures" >&2
              fi

              echo "Inspecting current repository schema state"
              info_log="$(mktemp)"
              if run_ninja_command "${info_log}" "info" info; then
                ninja_status=0
              else
                ninja_status=$?
              fi

              echo "----- ninja info -----"
              print_masked_log "${info_log}" || true
              echo "----------------------"

              create_needed=0
              upgrade_needed=0

              if grep -qiE 'NOT[ _-]*INITIALIZED|SCHEMA[[:space:]]*STATE[[:space:]]*:[[:space:]]*(EMPTY|FAILED|MISSING)|NO[[:space:]]*SCHEMA' "${info_log}"; then
                create_needed=1
              fi

              if grep -qiE 'ERROR' "${info_log}" && grep -qiE 'SCHEMA|REPOSITORY' "${info_log}"; then
                create_needed=1
              fi

              if grep -qiE 'UPGRADE[[:space:]]+(IS[[:space:]]+)?(REQUIRED|NEEDED|RECOMMENDED)' "${info_log}"; then
                upgrade_needed=1
              fi

              if [ "${ninja_status}" -ne 0 ]; then
                echo "ninja info command exited with status ${ninja_status}"
                create_needed=1
                upgrade_needed=1
              fi

              if [ "${create_needed}" -eq 1 ]; then
                echo "Schema not fully initialized; applying create scripts"

                run_ninja_sql "repository create" --create --mode repository
                run_ninja_sql "audit create" --create --mode audit

                upgrade_needed=1
              else
                echo "midPoint repository schema already initialized"
              fi

              if [ "${upgrade_needed}" -eq 1 ]; then
                echo "Applying repository upgrade scripts (idempotent)"

                run_ninja_sql "repository upgrade" --upgrade --mode repository
                run_ninja_sql "audit upgrade" --upgrade --mode audit

              else
                echo "midPoint repository schema already at latest version"
              fi

              rm -f "${info_log}"

              echo "midPoint repository bootstrap complete"
          envFrom:
            - configMapRef:
                name: midpoint-env
          env:
            - name: MIDPOINT_JDBC_URL
              value: jdbc:postgresql://iam-db-rw.iam.svc.cluster.local:5432/midpoint?sslmode=require
            - name: MIDPOINT_DB_USERNAME_FILE
              value: /var/run/secrets/midpoint-db-app/username
            - name: MIDPOINT_DB_PASSWORD_FILE
              value: /var/run/secrets/midpoint-db-app/password
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
            - name: config-xml
              mountPath: /config-template
              readOnly: true
            - name: midpoint-db-credentials
              mountPath: /var/run/secrets/midpoint-db-app
              readOnly: true
      containers:
        - name: midpoint
          image: evolveum/midpoint:4.9
          ports:
            - name: http
              containerPort: 8080
          envFrom:
            - configMapRef:
                name: midpoint-env
          env:
            - name: MP_SET_midpoint_administrator_initialPassword_FILE
              value: /var/run/secrets/midpoint-admin/password
            - name: MP_MEM_INIT
              value: "768M"
            - name: MP_MEM_MAX
              value: "1536M"
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
            - name: midpoint-admin-secret
              mountPath: /var/run/secrets/midpoint-admin
              readOnly: true
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
      volumes:
        - name: midpoint-home
          emptyDir: {}
        - name: config-xml
          configMap:
            name: midpoint-config
        - name: midpoint-db-credentials
          secret:
            secretName: midpoint-db-app
        - name: midpoint-admin-secret
          secret:
            secretName: midpoint-admin
---
apiVersion: v1
kind: Service
metadata:
  name: midpoint
  namespace: iam
spec:
  selector: { app: midpoint }
  ports:
    - name: http
      port: 8080
      targetPort: http
