apiVersion: apps/v1
kind: Deployment
metadata:
  name: midpoint
  namespace: iam
spec:
  replicas: 1
  selector:
    matchLabels: { app: midpoint }
  template:
    metadata:
      labels: { app: midpoint }
    spec:
      initContainers:
        - name: midpoint-home-init
          image: evolveum/midpoint:4.9
          command:
            - /bin/sh
            - -c
            - |
              set -eu
              dest="/midpoint-home"
              if [ ! -d "${dest}" ]; then
                echo "Creating midPoint home directory at ${dest}"
                mkdir -p "${dest}"
              fi

              if [ -z "$(ls -A "${dest}")" ]; then
                echo "Populating midPoint home directory with default contents"
                cp -a /opt/midpoint/var/. "${dest}/"
              else
                echo "midPoint home directory already populated; skipping default copy"
              fi
          volumeMounts:
            - name: midpoint-home
              mountPath: /midpoint-home
        - name: midpoint-db-init
          image: evolveum/midpoint:4.9
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              config_template="/config-template/config.xml"
              config_target="/opt/midpoint/var/config.xml"

              echo "Rendering midPoint configuration with repository connection settings"
              if [ ! -f "${config_template}" ]; then
                echo "ERROR: Config template ${config_template} not found" >&2
                exit 1
              fi

              jdbc_url="${MP_SET_midpoint_repository_jdbcUrl:-}"
              jdbc_username="${MP_SET_midpoint_repository_jdbcUsername:-}"
              jdbc_password="${MP_SET_midpoint_repository_jdbcPassword:-}"

              if [ -z "${jdbc_url}" ] || [ -z "${jdbc_username}" ] || [ -z "${jdbc_password}" ]; then
                echo "ERROR: Repository connection environment variables are incomplete" >&2
                exit 1
              fi

              escape_sed() {
                printf '%s' "$1" | sed -e 's/[\\/&|]/\\&/g'
              }

              tmp_config="$(mktemp)"
              cp "${config_template}" "${tmp_config}"

              sed -i \
                -e "s|__JDBC_URL__|$(escape_sed "${jdbc_url}")|g" \
                -e "s|__JDBC_USERNAME__|$(escape_sed "${jdbc_username}")|g" \
                -e "s|__JDBC_PASSWORD__|$(escape_sed "${jdbc_password}")|g" \
                "${tmp_config}"

              if grep -q '__JDBC_' "${tmp_config}"; then
                echo "ERROR: Failed to substitute repository placeholders in config.xml" >&2
                rm -f "${tmp_config}"
                exit 1
              fi

              chmod 600 "${tmp_config}"
              mv "${tmp_config}" "${config_target}"

              echo "Rendered config.xml with repository credentials"

              echo "Locating PostgreSQL JDBC driver"
              postgres_driver="$(find /opt/midpoint/lib -maxdepth 1 -type f -name 'postgresql-*.jar' | sort | tail -n 1)"

              if [ -z "${postgres_driver}" ]; then
                echo "ERROR: Could not find a PostgreSQL JDBC driver under /opt/midpoint/lib" >&2
                exit 1
              fi

              echo "Using JDBC driver: ${postgres_driver}"

              echo "Initializing midPoint native repository assets"
              /opt/midpoint/bin/midpoint.sh init-native

              echo "Inspecting current repository schema state"
              info_log="/tmp/ninja-info.log"
              if /opt/midpoint/bin/ninja.sh -j "${postgres_driver}" -B info >"${info_log}" 2>&1; then
                ninja_status=0
              else
                ninja_status=$?
              fi

              echo "----- ninja info -----"
              cat "${info_log}" || true
              echo "----------------------"

              create_needed=0
              upgrade_needed=0

              if grep -qiE 'NOT[ _-]*INITIALIZED|SCHEMA[[:space:]]*STATE[[:space:]]*:[[:space:]]*(EMPTY|FAILED|MISSING)|NO[[:space:]]*SCHEMA' "${info_log}"; then
                create_needed=1
              fi

              if grep -qiE 'ERROR' "${info_log}" && grep -qiE 'SCHEMA|REPOSITORY' "${info_log}"; then
                create_needed=1
              fi

              if grep -qiE 'UPGRADE[[:space:]]+(IS[[:space:]]+)?(REQUIRED|NEEDED|RECOMMENDED)' "${info_log}"; then
                upgrade_needed=1
              fi

              if [ "${ninja_status}" -ne 0 ]; then
                echo "ninja info command exited with status ${ninja_status}"
                upgrade_needed=1
              fi

              if [ "${create_needed}" -eq 1 ]; then
                echo "Schema not fully initialized; applying create scripts"
                
                /opt/midpoint/bin/ninja.sh -j "${postgres_driver}" run-sql --create --mode repository
                /opt/midpoint/bin/ninja.sh -j "${postgres_driver}" run-sql --create --mode audit

                upgrade_needed=1
              else
                echo "midPoint repository schema already initialized"
              fi

              if [ "${upgrade_needed}" -eq 1 ]; then
                echo "Applying repository upgrade scripts (idempotent)"

                /opt/midpoint/bin/ninja.sh -j "${postgres_driver}" run-sql --upgrade --mode repository
                /opt/midpoint/bin/ninja.sh -j "${postgres_driver}" run-sql --upgrade --mode audit

              else
                echo "midPoint repository schema already at latest version"
              fi

              rm -f "${info_log}"

              echo "midPoint repository bootstrap complete"
          env:
            - name: MP_SET_midpoint_repository_type
              value: native
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_SET_midpoint_repository_jdbcUrl
              value: jdbc:postgresql://iam-db-rw.iam.svc.cluster.local:5432/midpoint?sslmode=disable
            - name: MP_SET_midpoint_repository_jdbcUsername
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: username
            - name: MP_SET_midpoint_repository_jdbcPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: password
            - name: MP_NO_ENV_COMPAT
              value: "1"
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
            - name: config-xml
              mountPath: /config-template
              readOnly: true
      containers:
        - name: midpoint
          image: evolveum/midpoint:4.9
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: MP_SET_midpoint_administrator_initialPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-admin
                  key: password
            - name: MP_SET_midpoint_repository_type
              value: native
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_SET_midpoint_repository_jdbcUrl
              value: jdbc:postgresql://iam-db-rw.iam.svc.cluster.local:5432/midpoint?sslmode=disable
            - name: MP_SET_midpoint_repository_jdbcUsername
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: username
            - name: MP_SET_midpoint_repository_jdbcPassword
              valueFrom:
                secretKeyRef:
                  name: midpoint-db-app
                  key: password
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_NO_ENV_COMPAT
              value: "1"
            - name: MP_MEM_INIT
              value: "768M"
            - name: MP_MEM_MAX
              value: "1536M"
          volumeMounts:
            - name: midpoint-home
              mountPath: /opt/midpoint/var
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
      volumes:
        - name: midpoint-home
          emptyDir: {}
        - name: config-xml
          configMap:
            name: midpoint-config
---
apiVersion: v1
kind: Service
metadata:
  name: midpoint
  namespace: iam
spec:
  selector: { app: midpoint }
  ports:
    - name: http
      port: 8080
      targetPort: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: midpoint
  namespace: iam
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
spec:
  ingressClassName: nginx
  rules:
    - host: mp.127.0.0.1.nip.io  # patched by you later (optional)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: midpoint
                port:
                  number: 8080
