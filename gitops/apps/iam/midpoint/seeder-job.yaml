apiVersion: batch/v1
kind: Job
metadata:
  name: midpoint-seeder
  namespace: iam
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,HookFailed
    argocd.argoproj.io/sync-wave: "20"
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: seed
          image: curlimages/curl:8.9.1
          env:
            - name: MIDPOINT_URL
              value: "http://midpoint:8080/midpoint"
          volumeMounts:
            - name: objs
              mountPath: /objects
            - name: midpoint-admin-secret
              mountPath: /var/run/secrets/midpoint-admin
              readOnly: true
          command:
            - /bin/sh
            - -ec
            - |
              set -euo pipefail
              password_file="/var/run/secrets/midpoint-admin/password"
              if [ ! -r "${password_file}" ]; then
                echo "ERROR: midpoint admin password file ${password_file} is not readable" >&2
                exit 1
              fi

              MIDPOINT_PASSWORD="$(tr -d '\r\n' <"${password_file}")"

              if [ -z "${MIDPOINT_PASSWORD:-}" ]; then
                echo "ERROR: midpoint admin password from ${password_file} is empty" >&2
                exit 1
              fi

              username_file="/var/run/secrets/midpoint-admin/username"
              if [ -z "${MIDPOINT_USERNAME:-}" ] && [ -r "${username_file}" ]; then
                MIDPOINT_USERNAME="$(tr -d '\r\n' <"${username_file}")"
              fi

              midpoint_username="${MIDPOINT_USERNAME:-administrator}"

              if [ -z "${midpoint_username}" ]; then
                echo "ERROR: midpoint admin username could not be determined" >&2
                exit 1
              fi
              MP_URL="${MIDPOINT_URL:-http://midpoint:8080/midpoint}"
              echo "Using midPoint at: $MP_URL"

              auth="${midpoint_username}:${MIDPOINT_PASSWORD}"

              wait_attempts="${MIDPOINT_WAIT_MAX_ATTEMPTS:-30}"
              wait_sleep="${MIDPOINT_WAIT_SLEEP_SECONDS:-10}"
              attempt=1
              ready=0
              while [ "${attempt}" -le "${wait_attempts}" ]; do
                http_code="$(curl -sS -o /dev/null -u "$auth" -w '%{http_code}' \
                  "$MP_URL/ws/rest/version" || true)"

                case "${http_code}" in
                200)
                  echo "midPoint REST endpoint is ready (HTTP ${http_code})"
                  ready=1
                  break
                  ;;
                *)
                  echo "midPoint not ready yet (HTTP ${http_code}) [${attempt}/${wait_attempts}]"
                  attempt=$((attempt + 1))
                  if [ "${attempt}" -le "${wait_attempts}" ]; then
                    sleep "${wait_sleep}"
                  fi
                  ;;
                esac
              done

              if [ "${ready}" -ne 1 ]; then
                echo "Timed out waiting for midPoint REST API after ${wait_attempts} attempts" >&2
                exit 1
              fi

              set -- /objects/*.xml

              if [ "${1}" = "/objects/*.xml" ]; then
                echo "No midPoint object definitions were mounted; skipping import"
              else
                for f in "$@"; do
                  echo "Posting $f"
                  tmp_response="$(mktemp)"
                  http_code="$(curl -sS -u "$auth" -H "Content-Type: application/xml" \
                    -X POST "$MP_URL/ws/rest/objects" --data-binary "@$f" \
                    -o "${tmp_response}" -w '%{http_code}' || echo '000')"

                  case "${http_code}" in
                  200|201)
                    echo "Imported $f (HTTP ${http_code})"
                    ;;
                  409)
                    echo "Object from $f already exists; skipping (HTTP 409)"
                    ;;
                  *)
                    echo "Failed to import $f (HTTP ${http_code})" >&2
                    if [ -s "${tmp_response}" ]; then
                      echo "Response body:" >&2
                      cat "${tmp_response}" >&2
                    fi
                    rm -f "${tmp_response}"
                    exit 1
                    ;;
                esac

                  rm -f "${tmp_response}"
                done
              fi

              echo "Done."
      volumes:
        - name: objs
          configMap:
            name: midpoint-objects
        - name: midpoint-admin-secret
          secret:
            secretName: midpoint-admin
