name: 01 - Provision AKS with Terraform

on:
  workflow_dispatch:
    inputs:
      TF_ACTION:
        description: 'apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      LOCATION:
        description: 'Azure region'
        required: false
        default: 'westeurope'
      RESOURCE_PREFIX:
        description: 'Prefix for resource names'
        required: false
        default: 'rwsdemo'
      RESOURCE_GROUP_NAME:
        description: 'Resource group to create or reuse (defaults to "<prefix>-rg")'
        required: false
        default: ''
      AKS_NODE_VM_SIZE:
        description: 'VM size for the default AKS node pool'
        required: false
        default: 'Standard_D4s_v3'
      AKS_NODE_COUNT:
        description: 'Node count for the default AKS node pool'
        required: false
        default: 3
        type: number

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_IN_AUTOMATION: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure Terraform state storage
        id: tfstate
        shell: bash
        working-directory: infra/azure/terraform
        env:
          LOCATION: ${{ inputs.LOCATION }}
          RESOURCE_PREFIX: ${{ inputs.RESOURCE_PREFIX }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          STATE_RG="${RESOURCE_PREFIX}-tfstate-rg"
          HASH="$(echo -n "${AZURE_SUBSCRIPTION_ID}" | sha256sum | cut -c1-8)"
          STATE_SA_BASE="${RESOURCE_PREFIX}tf${HASH}"
          STATE_SA="${STATE_SA_BASE:0:24}"

          echo "Ensuring Terraform backend storage account ${STATE_SA} in resource group ${STATE_RG}."
          az group create --name "${STATE_RG}" --location "${LOCATION}" --output none
          if ! az storage account show --name "${STATE_SA}" --resource-group "${STATE_RG}" >/dev/null 2>&1; then
            echo "Creating storage account ${STATE_SA} for Terraform state."
            az storage account create \
              --name "${STATE_SA}" \
              --resource-group "${STATE_RG}" \
              --location "${LOCATION}" \
              --sku Standard_LRS \
              --kind StorageV2 \
              --min-tls-version TLS1_2 \
              --allow-blob-public-access false \
              --output none
          else
            echo "Storage account ${STATE_SA} already exists."
          fi

          ACCOUNT_KEY="$(az storage account keys list --resource-group "${STATE_RG}" --account-name "${STATE_SA}" --query '[0].value' -o tsv)"
          if [[ -z "${ACCOUNT_KEY}" ]]; then
            echo "Failed to retrieve storage account key for ${STATE_SA}." >&2
            exit 1
          fi
          echo "::add-mask::${ACCOUNT_KEY}"

          az storage container create \
            --name tfstate \
            --account-name "${STATE_SA}" \
            --account-key "${ACCOUNT_KEY}" \
            --public-access off \
            --output none

          echo "resource_group=${STATE_RG}" >> "${GITHUB_OUTPUT}"
          echo "storage_account=${STATE_SA}" >> "${GITHUB_OUTPUT}"
          echo "storage_account_key=${ACCOUNT_KEY}" >> "${GITHUB_OUTPUT}"

      - name: Terraform Init
        working-directory: infra/azure/terraform
        shell: bash
        env:
          ARM_ACCESS_KEY: ${{ steps.tfstate.outputs.storage_account_key }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="resource_group_name=${{ steps.tfstate.outputs.resource_group }}" \
            -backend-config="storage_account_name=${{ steps.tfstate.outputs.storage_account }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ inputs.RESOURCE_PREFIX }}.tfstate"

      - name: Determine resource configuration
        id: rg
        shell: bash
        working-directory: infra/azure/terraform
        env:
          RESOURCE_PREFIX: ${{ inputs.RESOURCE_PREFIX }}
          RESOURCE_GROUP_NAME_INPUT: ${{ inputs.RESOURCE_GROUP_NAME }}
        run: |
          set -euo pipefail
          RG_NAME="${RESOURCE_GROUP_NAME_INPUT:-}"
          if [[ -z "${RG_NAME}" ]]; then
            RG_NAME="${RESOURCE_PREFIX}-rg"
          fi

          AKS_NAME="${RESOURCE_PREFIX}-aks"

          CREATE_RG="true"
          if terraform state show azurerm_resource_group.rg[0] >/dev/null 2>&1; then
            echo "Terraform state already tracks resource group ${RG_NAME}; keeping create_resource_group=true."
          else
            if az group exists --name "${RG_NAME}" | grep -qi true; then
              CREATE_RG="false"
              echo "Resource group ${RG_NAME} already exists; Terraform will reuse it."
            else
              echo "Resource group ${RG_NAME} does not exist; Terraform will create it."
            fi
          fi

          echo "resource_group_name=${RG_NAME}" >> "${GITHUB_OUTPUT}"
          echo "create_resource_group=${CREATE_RG}" >> "${GITHUB_OUTPUT}"
          echo "aks_name=${AKS_NAME}" >> "${GITHUB_OUTPUT}"

      - name: Import existing Azure resources (if needed)
        if: inputs.TF_ACTION == 'apply'
        shell: bash
        working-directory: infra/azure/terraform
        env:
          RESOURCE_PREFIX: ${{ inputs.RESOURCE_PREFIX }}
          RESOURCE_GROUP_NAME: ${{ steps.rg.outputs.resource_group_name }}
          AKS_NAME: ${{ steps.rg.outputs.aks_name }}
        run: |
          set -euo pipefail

          if terraform state show azurerm_storage_account.sa >/dev/null 2>&1; then
            echo "Storage account already tracked in Terraform state."
          else
            SA_PREFIX="${RESOURCE_PREFIX}sa"
            EXISTING_SA="$(az storage account list --resource-group "${RESOURCE_GROUP_NAME}" --query "[?starts_with(name, '${SA_PREFIX}')].name | [0]" -o tsv 2>/dev/null || true)"
            if [[ -n "${EXISTING_SA}" ]]; then
              echo "Importing storage account ${EXISTING_SA} into Terraform state."
              SA_SUFFIX="${EXISTING_SA#${SA_PREFIX}}"
              if [[ -n "${SA_SUFFIX}" ]]; then
                terraform import random_string.sa_suffix "${SA_SUFFIX}"
              else
                echo "Existing storage account ${EXISTING_SA} does not match expected prefix ${SA_PREFIX}; skipping random suffix import." >&2
              fi
              terraform import azurerm_storage_account.sa "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Storage/storageAccounts/${EXISTING_SA}"
              set +e
              terraform import azurerm_storage_container.cnpg "https://${EXISTING_SA}.blob.core.windows.net/cnpg-backups"
              STATUS=$?
              set -e
              if [[ ${STATUS} -ne 0 ]]; then
                echo "Storage container cnpg-backups not found; Terraform will create it."
              fi
            else
              echo "No existing storage account with prefix ${SA_PREFIX} detected; Terraform will create one."
            fi
          fi

          if terraform state show azurerm_kubernetes_cluster.aks >/dev/null 2>&1; then
            echo "AKS cluster already tracked in Terraform state."
          else
            if az aks show --name "${AKS_NAME}" --resource-group "${RESOURCE_GROUP_NAME}" >/dev/null 2>&1; then
              echo "Importing existing AKS cluster ${AKS_NAME} into Terraform state."
              terraform import azurerm_kubernetes_cluster.aks "/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.ContainerService/managedClusters/${AKS_NAME}"
            else
              echo "AKS cluster ${AKS_NAME} not found; Terraform will create it."
            fi
          fi

      - name: Terraform Plan
        if: inputs.TF_ACTION == 'apply'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform plan -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Apply
        if: inputs.TF_ACTION == 'apply'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Destroy
        if: inputs.TF_ACTION == 'destroy'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform destroy -auto-approve -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Outputs
        if: inputs.TF_ACTION == 'apply'
        id: tfout
        working-directory: infra/azure/terraform
        run: |
          echo "RG=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT
          echo "AKS=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT
          echo "SA=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "BLOB_ENDPOINT=$(terraform output -raw storage_blob_endpoint)" >> $GITHUB_OUTPUT

      - name: Show outputs
        if: inputs.TF_ACTION == 'apply'
        run: |
          echo "Resource Group: ${{ steps.tfout.outputs.RG }}"
          echo "AKS: ${{ steps.tfout.outputs.AKS }}"
          echo "Storage Account: ${{ steps.tfout.outputs.SA }}"
          echo "Blob Endpoint: ${{ steps.tfout.outputs.BLOB_ENDPOINT }}"
