name: 01 - Provision AKS with Terraform

on:
  workflow_dispatch:
    inputs:
      TF_ACTION:
        description: 'apply or destroy'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      LOCATION:
        description: 'Azure region'
        required: false
        default: 'westeurope'
      RESOURCE_PREFIX:
        description: 'Prefix for resource names'
        required: false
        default: 'rwsdemo'
      RESOURCE_GROUP_NAME:
        description: 'Resource group to create or reuse (defaults to "<prefix>-rg")'
        required: false
        default: ''
      AKS_NODE_VM_SIZE:
        description: 'VM size for the default AKS node pool'
        required: false
        default: 'Standard_D4s_v3'
      AKS_NODE_COUNT:
        description: 'Node count for the default AKS node pool'
        required: false
        default: 3
        type: number

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_IN_AUTOMATION: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra/azure/terraform
        run: terraform init -input=false

      - name: Determine Resource Group configuration
        id: rg
        shell: bash
        working-directory: infra/azure/terraform
        env:
          RESOURCE_PREFIX: ${{ inputs.RESOURCE_PREFIX }}
          RESOURCE_GROUP_NAME_INPUT: ${{ inputs.RESOURCE_GROUP_NAME }}
        run: |
          set -euo pipefail
          RG_NAME="${RESOURCE_GROUP_NAME_INPUT:-}"
          if [[ -z "${RG_NAME}" ]]; then
            RG_NAME="${RESOURCE_PREFIX}-rg"
          fi

          CREATE_RG="true"
          if terraform state show azurerm_resource_group.rg[0] >/dev/null 2>&1; then
            echo "Terraform state already tracks resource group ${RG_NAME}; keeping create_resource_group=true."
          else
            if az group exists --name "${RG_NAME}" | grep -qi true; then
              CREATE_RG="false"
              echo "Resource group ${RG_NAME} already exists; Terraform will reuse it."
            else
              echo "Resource group ${RG_NAME} does not exist; Terraform will create it."
            fi
          fi

          echo "resource_group_name=${RG_NAME}" >> "${GITHUB_OUTPUT}"
          echo "create_resource_group=${CREATE_RG}" >> "${GITHUB_OUTPUT}"

      - name: Terraform Plan
        if: inputs.TF_ACTION == 'apply'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform plan -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Apply
        if: inputs.TF_ACTION == 'apply'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Destroy
        if: inputs.TF_ACTION == 'destroy'
        working-directory: infra/azure/terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform destroy -auto-approve -input=false \
            -var="location=${{ inputs.LOCATION }}" \
            -var="prefix=${{ inputs.RESOURCE_PREFIX }}" \
            -var="aks_default_node_vm_size=${{ inputs.AKS_NODE_VM_SIZE }}" \
            -var="aks_default_node_count=${{ inputs.AKS_NODE_COUNT }}" \
            -var="resource_group_name=${{ steps.rg.outputs.resource_group_name }}" \
            -var="create_resource_group=${{ steps.rg.outputs.create_resource_group }}"

      - name: Terraform Outputs
        if: inputs.TF_ACTION == 'apply'
        id: tfout
        working-directory: infra/azure/terraform
        run: |
          echo "RG=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT
          echo "AKS=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT
          echo "SA=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
          echo "BLOB_ENDPOINT=$(terraform output -raw storage_blob_endpoint)" >> $GITHUB_OUTPUT

      - name: Show outputs
        if: inputs.TF_ACTION == 'apply'
        run: |
          echo "Resource Group: ${{ steps.tfout.outputs.RG }}"
          echo "AKS: ${{ steps.tfout.outputs.AKS }}"
          echo "Storage Account: ${{ steps.tfout.outputs.SA }}"
          echo "Blob Endpoint: ${{ steps.tfout.outputs.BLOB_ENDPOINT }}"
