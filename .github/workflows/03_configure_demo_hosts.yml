name: "03 - Configure demo hosts (nip.io) & Ingresses"

on:
  workflow_dispatch:
    inputs:
      RESOURCE_GROUP:
        description: 'AKS Resource Group (from TF outputs)'
        required: true
        default: 'rwsdemo-rg'
      AKS_NAME:
        description: 'AKS cluster name (from TF outputs)'
        required: true
        default: 'rwsdemo-aks'

permissions:
  id-token: write
  contents: write

jobs:
  configure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ inputs.RESOURCE_GROUP }}
          cluster-name: ${{ inputs.AKS_NAME }}

      - name: Configure demo ingress hosts
        id: configure
        shell: bash
        run: |
          set -euo pipefail
          python3 scripts/configure_demo_hosts.py --params-file gitops/apps/iam/params.env

      - name: Wait for ingress endpoints to become reachable
        shell: bash
        run: |
          set -euo pipefail

          emit_diagnostics() {
            set +eu
            echo "::group::Ingress diagnostics"
            echo "📡 Inspecting ingress-nginx service status"
            kubectl -n ingress-nginx get svc ingress-nginx-controller -o wide || true
            kubectl -n ingress-nginx describe svc ingress-nginx-controller || true
            echo "📦 Listing ingress objects"
            kubectl get ingress --all-namespaces || true
            kubectl describe ingress --all-namespaces || true
            echo "📦 Listing cert-manager resources"
            kubectl get certificates --all-namespaces || true
            kubectl get certificaterequests --all-namespaces || true
            kubectl get orders.acme.cert-manager.io --all-namespaces || true
            kubectl describe certificates --all-namespaces || true
            kubectl describe certificaterequests --all-namespaces || true
            kubectl describe orders.acme.cert-manager.io --all-namespaces || true
            echo "🌐 DNS lookup"
            if command -v dig >/dev/null 2>&1; then
              dig +short "${KC_HOST}" || true
            else
              nslookup "${KC_HOST}" || true
            fi
            echo "🔐 TLS handshake information"
            if command -v openssl >/dev/null 2>&1; then
              timeout 15 openssl s_client -connect "${KC_HOST}:443" -servername "${KC_HOST}" < /dev/null || true
            else
              echo "openssl not available on runner"
            fi
            echo "::endgroup::"
            set -eu
          }

          trap 'emit_diagnostics' ERR

          : "${KC_HOST:?KC_HOST was not exported by configure_demo_hosts.py}"
          : "${MP_HOST:?MP_HOST was not exported by configure_demo_hosts.py}"
          : "${ARGOCD_HOST:?ARGOCD_HOST was not exported by configure_demo_hosts.py}"

          endpoints=(
            "http://${KC_HOST}"
            "http://${MP_HOST}/midpoint"
            "http://${ARGOCD_HOST}"
          )

          for url in "${endpoints[@]}"; do
            echo "::group::Probing ${url}"
            for attempt in $(seq 1 2); do
              if curl --fail --location --show-error --silent --connect-timeout 5 --max-time 20 --output /dev/null "${url}"; then
                http_code=$(curl --silent --show-error --write-out '%{http_code}' --output /dev/null "${url}")
                echo "✅ ${url} responded with HTTP ${http_code} (attempt ${attempt})."
                break
              fi
              echo "Attempt ${attempt} failed for ${url}; waiting 15 seconds before retrying..."
              sleep 15
              if [[ ${attempt} -eq 2 ]]; then
                echo "❌ Unable to reach ${url} after ${attempt} attempts."
                # Trigger the ERR trap so diagnostics are emitted before the
                # job exits; `exit` bypasses the trap in bash.
                false
              fi
            done
            echo "::endgroup::"
          done

          trap - ERR

      - name: Commit ingress host parameters
        shell: bash
        run: |
          set -euo pipefail
          KC_HOST_VALUE="${KC_HOST:-}"
          MP_HOST_VALUE="${MP_HOST:-}"
          ARGOCD_HOST_VALUE="${ARGOCD_HOST:-}"
          BRANCH_REF="${GITHUB_REF:-}"
          if git diff --quiet --exit-code -- gitops/apps/iam/params.env; then
            echo "Ingress host parameters already up to date; skipping commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add gitops/apps/iam/params.env
            git commit -m "Update demo ingress hosts to ${KC_HOST_VALUE}, ${MP_HOST_VALUE}, and ${ARGOCD_HOST_VALUE}"
            if [[ "${BRANCH_REF}" == refs/heads/* ]]; then
              BRANCH_NAME="${BRANCH_REF#refs/heads/}"
              git push origin "HEAD:${BRANCH_NAME}"
            else
              echo "Ref ${BRANCH_REF} is not a branch; skipping push."
            fi
          fi

      - name: Summary
        shell: bash
        run: |
          set -euo pipefail
          echo "✅ Done. Open these URLs in your browser:"
          echo "🔗 Keycloak : ${{ steps.configure.outputs.keycloak_url }}"
          echo "🔗 midPoint : ${{ steps.configure.outputs.midpoint_url }}"
          echo "🔗 Argo CD  : ${{ steps.configure.outputs.argocd_url }}"
          echo "🌐 External IP : ${EXTERNAL_IP:-unknown}"
